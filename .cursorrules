# SmartDoc2 Integration Rules

## Overview
SmartDoc2 is a LlamaIndex-powered documentation system that indexes PDFs, GitHub repositories, and web pages into a persistent ChromaDB vector database. It features intelligent schematic analysis using Gemini Vision and a modern web UI for multi-workspace management.

## Available Commands

The user can invoke SmartDoc2 using natural language. When you detect these requests, translate them into the appropriate CLI commands:

### Indexing Commands
- "Index this PDF: [path]" ‚Üí `smartdoc index-pdf [path]`
- "Index the datasheet at [path]" ‚Üí `smartdoc index-pdf [path]`
- "Fetch the [library] from GitHub" ‚Üí `smartdoc fetch-repo [github_url]`
- "Index [GitHub URL]" ‚Üí `smartdoc fetch-repo [github_url]`
- "Scrape [URL]" ‚Üí `smartdoc web [url]`
- "Index this Arduino documentation: [URL]" ‚Üí `smartdoc web [url]`

### Query Commands
- "Search docs: [query]" ‚Üí `smartdoc query "[query]"`
- "What are the [technical question]?" ‚Üí `smartdoc query "[question]"`
- "Find information about [topic]" ‚Üí `smartdoc query "[topic]"`
- "Look up [topic] with reprocessing" ‚Üí `smartdoc query "[topic]" --reprocess`
- "Search only in [source]" ‚Üí `smartdoc query "[query]" --source [path]`
- "Find code examples" ‚Üí `smartdoc query "[query]" --type github`

### Management Commands
- "List indexed sources" ‚Üí `smartdoc list-sources`
- "Show database stats" ‚Üí `smartdoc stats`
- "Remove [source]" ‚Üí `smartdoc remove [source]`
- "View logs for [source]" ‚Üí `smartdoc logs [source]`
- "Reset database" ‚Üí `smartdoc reset` (‚ö†Ô∏è destructive!)

### Web UI Commands
- "Launch web manager" ‚Üí `smartdoc web-manager`
- "Open database UI" ‚Üí `smartdoc web-manager`
- "Manage multiple databases" ‚Üí `smartdoc web-manager`

## When to Use Which Interface

### Use CLI when:
- Indexing new sources (faster, shows progress)
- Quick queries from terminal
- Scripting/automation
- CI/CD integration
- Single workspace operations

### Use Web UI when:
- Managing multiple workspaces/databases
- Visual overview of all sources
- Bulk operations (copy/move/delete assets)
- Viewing processing logs visually
- Comparing database statistics
- Team collaboration (shared view)

## Integration Guidelines

### When User Asks Technical Questions

1. **Check SmartDoc first** before using general knowledge
2. Use: `smartdoc query "[user_question]"` 
3. If confidence < 0.6 and query involves schematics/pinouts, suggest: `smartdoc query "[question]" --reprocess`
4. Always cite sources in your response using the format returned by SmartDoc

### Response Format

When answering from SmartDoc results:
```
According to [nano_r4.pdf, p.23]: 
SPI pins on Arduino Nano R4:
- MOSI: D11
- MISO: D12
- SCK: D13
- CS: D10

Source: Arduino Nano R4 Datasheet, page 23
```

### Confidence-Based Actions

- **Confidence > 0.8**: Provide answer directly with citations
- **Confidence 0.6-0.8**: Provide answer but note: "Medium confidence - you may want to verify"
- **Confidence < 0.6**: Suggest reprocessing with `--reprocess` flag or indexing additional sources

### Schematic/Pinout Queries

For queries about:
- Pin configurations (SPI, I2C, UART, GPIO)
- Schematic diagrams
- Wiring and connections
- Voltage levels and power

Always use `--reprocess` flag: `smartdoc query "[question]" --reprocess`

This triggers Gemini Vision to analyze relevant schematics with the specific query context.

### Source Management

Before indexing, check if source already exists:
```bash
smartdoc list-sources
```

If source needs updating, remove old version first:
```bash
smartdoc remove [old_source_path]
smartdoc index-pdf [new_source_path]
```

## Query Options Reference

### Basic Query
```bash
smartdoc query "your question"
```

### Advanced Options
- `--reprocess` - Reanalyze schematics with specific query context (for pinouts, wiring)
- `--source [path]` - Search only in specific source (e.g., `--source "data/pdfs/nano_r4.pdf"`)
- `--type [pdf|github|web]` - Filter by source type (e.g., `--type github` for code examples)

### Combined Example
```bash
smartdoc query "SPI configuration" --type pdf --reprocess
```

## Troubleshooting with Logs

When indexing fails or results are poor:

1. **View processing logs:**
```bash
smartdoc logs [source_path]
```

2. **Check what went wrong:**
- Text extraction status and chunk count
- Vision analysis success/failure
- Schematic detection results
- Specific error messages

3. **In Web UI:**
- Navigate to Dashboard tab
- Load the database
- Select asset row
- Click "üìã Logs" button

## Examples

### Example 1: PDF Indexing
**User**: "Index the Arduino Nano R4 datasheet at data/pdfs/nano_r4.pdf"

**Response**: Execute:
```bash
smartdoc index-pdf data/pdfs/nano_r4.pdf
```

### Example 2: Technical Query with Context
**User**: "What are the SPI pins on the Arduino Nano R4?"

**Response**: Execute:
```bash
smartdoc query "SPI pins Arduino Nano R4" --reprocess
```
Then provide answer with citations from the results.

### Example 3: GitHub Repository
**User**: "Fetch the Arduino MIDI library from GitHub"

**Response**: Execute:
```bash
smartdoc fetch-repo https://github.com/FortySevenEffects/arduino_midi_library
```

### Example 4: Code Search
**User**: "How do I send a MIDI note on message?"

**Response**: Execute:
```bash
smartdoc query "MIDI send note on message" --type github
```
Then provide code example with citation.

### Example 5: Debugging Failed Indexing
**User**: "Why didn't the ESP32 datasheet index properly?"

**Response**: Execute:
```bash
smartdoc logs "data/pdfs/esp32.pdf"
```
Then analyze the logs to identify issues (text extraction, vision analysis, etc.)

### Example 6: Multi-Workspace Management
**User**: "I need to organize my databases and copy some PDFs between projects"

**Response**: Execute:
```bash
smartdoc web-manager
```
Then guide them through the Dashboard and Transfer tabs.

## Web Manager UI Guide

### Dashboard Tab
- **Top table**: All databases with statistics
- **Select database**: Enter row # and click "Load Database"
- **Bottom table**: All assets in selected database with detailed status
- **Actions**: Delete assets, view processing logs

### Transfer & Copy Tab
- **Split view**: Source (left) and Destination (right)
- **Copy**: Duplicate assets to another database
- **Move**: Transfer assets and remove from source
- **Use row indices**: Select rows like "0,1,2"

## Workspace-Specific Notes

- PDF folder: `data/pdfs/` - User can drop PDFs here
- Database: `data/chroma_db/` - Persistent across sessions
- Registry: `data/registry.db` - Tracks all indexed sources
- Multi-workspace: Web manager scans entire root directory for SmartDoc databases

## Best Practices

1. **Always cite sources** - Include file name and page number for PDFs, file path for code
2. **Check confidence** - Suggest reprocessing or additional indexing if confidence is low
3. **Be specific** - For technical queries, use exact terminology from datasheets
4. **Version awareness** - Note which version/commit of code was indexed
5. **Datasheet focus** - Prioritize datasheet information for hardware questions
6. **Use logs for debugging** - When indexing fails, check logs before re-indexing
7. **Organize with web UI** - For managing multiple projects, use web-manager

## Error Handling

### If SmartDoc command fails:

1. **Check API keys** (if using LlamaParse or Gemini Vision):
   ```bash
   # Verify .env file exists with:
   # LLAMAPARSE_API_KEY=your_key
   # GEMINI_API_KEY=your_key
   ```

2. **Verify source path/URL** is correct

3. **Check file size limits** (warn at 5MB, prompt at 50MB for LlamaParse)

4. **View processing logs** to diagnose:
   ```bash
   smartdoc logs [source_path]
   ```

5. **Check database health**:
   ```bash
   smartdoc stats
   ```

6. **If ChromaDB schema errors**:
   - Backup current database
   - Create fresh database (will auto-initialize on next index)

## Integration Status

SmartDoc2 is active and ready to use. The database persists with this workspace, so all indexed documentation remains available across sessions. The web manager supports multi-workspace operations across the entire root directory.

## MCP Server

SmartDoc2 includes an MCP (Model Context Protocol) server for IDE integration:
- File: `smartdoc_mcp_server.py`
- Provides programmatic access to all SmartDoc functions
- Used for AI assistant integrations
