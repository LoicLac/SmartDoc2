# SmartDoc2 Integration Rules

## Overview
SmartDoc2: LlamaIndex-powered docs system with ChromaDB, Gemini Vision schematic analysis, automatic reprocessing, and selective knowledge addition.

## Command Mappings

### Indexing
- "Index PDF [path]" â†’ `smartdoc index-pdf [path]`
- "Fetch [github_url]" â†’ `smartdoc fetch-repo [github_url]`
- "Scrape [url]" â†’ `smartdoc web [url]`

### Query
- "What/Find [question]" â†’ `smartdoc query "[question]"`
- "Search in [source]" â†’ `smartdoc query "[q]" --source [path]`
- "Find code" â†’ `smartdoc query "[q]" --type github`
- Force reprocess â†’ `smartdoc query "[q]" --reprocess`

### Management
- "List sources" â†’ `smartdoc list-sources`
- "Show stats" â†’ `smartdoc stats`
- "Remove [source]" â†’ `smartdoc remove [source]`
- "View logs [source]" â†’ `smartdoc logs [source]`
- "Launch web UI" â†’ `smartdoc web-manager`

## Core Behavior

### Query Strategy
1. **Always check SmartDoc first** before using general knowledge
2. **Use simple query**: `smartdoc query "[question]"` (no flags needed)
3. **System auto-reprocesses** when:
   - Confidence < 0.6
   - Schematic terms detected (pin, SPI, I2C, UART, pinout, diagram, GPIO)
   - Query about hardware/connections
4. **Always cite sources** from SmartDoc results

### Automatic Reprocessing
- Expands to 10 results for schematic queries
- Checks cache first (instant if cached)
- Applies focused Gemini Vision analysis
- Selectively adds high-value findings to database
- Visual: `ðŸ”„ [Reprocessed]` or `ðŸ’¾ [Added to DB]`

### Response Format
```
According to [source.pdf, p.X]:
[Technical answer with specifics]

Source: [Full citation]
```

### Confidence Handling
- **> 0.8**: Answer directly with citations
- **0.6-0.8**: Answer with "Medium confidence - verify"
- **< 0.6**: System auto-reprocesses; check improved answer

### Progressive Learning
- Database learns from queries (adds focused chunks)
- Related queries benefit from previous analysis
- Monitor with `smartdoc stats` (document count increases)

## Critical Rules

1. **Source Management**: Check `smartdoc list-sources` before re-indexing
2. **Schematic Queries**: Trust automatic reprocessing (no `--reprocess` needed)
3. **Debugging**: Use `smartdoc logs [source]` for indexing issues
4. **Web UI**: Use for multi-workspace management (`smartdoc web-manager`)
5. **Database Growth**: Expect intelligent growth (selective, not bloated)

## Interface Selection

**CLI**: Indexing, quick queries, automation, single workspace
**Web UI**: Multi-workspace, bulk ops, visual logs, team collaboration

## Essential Notes

- **Workspace**: `.smartdoc_{project_name}/` (dynamically named, git-ignored)
  - Example: In "MyProject" â†’ `.smartdoc_myproject/`
- PDF folder: `.smartdoc_{project_name}/pdfs/`
- Database: `.smartdoc_{project_name}/chroma_db/` (persistent, grows intelligently)
- Registry: `.smartdoc_{project_name}/registry.db` (tracks sources + cached analysis)
- API keys: `.smartdoc_{project_name}/.env` (auto-created with placeholders)
- File limits: 5MB warning, 50MB prompt

## Examples (Key Patterns)

**Technical Query:**
```bash
smartdoc query "SPI pins Arduino Nano R4"
# Auto-reprocesses â†’ confidence 0.13 â†’ 0.88
# Adds focused chunks â†’ future queries benefit
```

**Follow-up Query:**
```bash
smartdoc query "MOSI pin Arduino Nano R4"  
# Uses focused chunks from previous â†’ no reprocessing
```

## Error Handling

1. Failed indexing â†’ `smartdoc logs [source]`
2. Low confidence â†’ System auto-reprocesses
3. ChromaDB schema error â†’ Backup DB, recreate (auto-init on next index)
4. No API key â†’ Check .env file
5. Reprocessing not adding â†’ Check confidence boost > 0.3, query has technical terms

## Integration Status
Active. Database persists across sessions. Auto-learns from technical queries.
